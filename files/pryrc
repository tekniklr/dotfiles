Pry.config.editor = "subl"

# set prompt to something useful in rails
if ENV.include?('RAILS_ENV') || defined?(Rails)
  Pry.config.prompt_name = "#{File.basename(Dir.pwd)} "
  if ENV.include?('RAILS_ENV')
    unless ENV['RAILS_ENV'] == 'development'
      Pry.config.prompt_name += "#{ENV['RAILS_ENV'].upcase} "
    end
  elsif defined?(Rails)
    unless Rails.env.development? 
      Pry.config.prompt_name += "#{Rails.env.upcase} "
    end
  end
end

default_command_set = Pry::CommandSet.new do
  command "sql", "Send sql over AR." do |query|
    if ENV['RAILS_ENV'] || defined?(Rails)
      pp ActiveRecord::Base.connection.select_all(query)
    else
      pp "No rails env defined"
    end
  end
end
Pry.config.commands.import default_command_set

# === Awesome Print support ===
# Taken from: https://github.com/skwp/dotfiles/blob/master/irb/pryrc
# Awesome Print is a Ruby library that pretty prints Ruby objects
# in full color exposing their internal structure with proper
# indentation.
begin
  require 'awesome_print'
  # The following line enables awesome_print for all pry output,
  # and it also enables paging
  Pry.config.print = proc {|output, value| Pry::Helpers::BaseHelpers.stagger_output("=> #{value.ai}", output)}
  # If you want awesome_print without automatic pagination, use the line below
  # Pry.config.print = proc { |output, value| output.puts value.ai }
rescue LoadError => err
  puts "'awesome_print' gem not installed"
end

# === Listing config ===
# Taken from: https://github.com/skwp/dotfiles/blob/master/irb/pryrc
# Better colors - by default the headings for methods are too
# similar to method name colors leading to a "soup"
# These colors are optimized for use with Solarized scheme
# for your terminal
Pry.config.ls.separator = "\n" # new lines between methods
Pry.config.ls.heading_color = :magenta
Pry.config.ls.public_method_color = :green
Pry.config.ls.protected_method_color = :yellow
Pry.config.ls.private_method_color = :bright_black

# === Color Customization ===
# Taken from: https://github.com/skwp/dotfiles/blob/master/irb/pryrc
# Everything below this line is for customizing colors, you have to use the ugly
# color codes, but such is life.
CodeRay.scan("example", :ruby).term # just to load necessary files
# Token colors pulled from: https://github.com/rubychan/coderay/blob/master/lib/coderay/encoders/terminal.rb
TERM_TOKEN_COLORS = {
        :attribute_name => '33',
        :attribute_value => '31',
        :binary => '1;35',
        :char => {
          :self => '36', :delimiter => '34'
        },
        :class => '1;35',
        :class_variable => '36',
        :color => '32',
        :comment => '37',
        :complex => '34',
        :constant => ['34', '4'],
        :decoration => '35',
        :definition => '1;32',
        :directive => ['32', '4'],
        :doc => '46',
        :doctype => '1;30',
        :doc_string => ['31', '4'],
        :entity => '33',
        :error => ['1;33', '41'],
        :exception => '1;31',
        :float => '1;35',
        :function => '1;34',
        :global_variable => '42',
        :hex => '1;36',
        :include => '33',
        :integer => '1;34',
        :key => '35',
        :label => '1;15',
        :local_variable => '33',
        :octal => '1;35',
        :operator_name => '1;29',
        :predefined_constant => '1;36',
        :predefined_type => '1;30',
        :predefined => ['4', '1;34'],
        :preprocessor => '36',
        :pseudo_class => '34',
        :regexp => {
          :self => '31',
          :content => '31',
          :delimiter => '1;29',
          :modifier => '35',
          :function => '1;29'
        },
        :reserved => '1;31',
        :shell => {
          :self => '42',
          :content => '1;29',
          :delimiter => '37',
        },
        :string => {
          :self => '36',
          :modifier => '1;32',
          :escape => '1;36',
          :delimiter => '1;32',
        },
        :symbol => '1;31',
        :tag => '34',
        :type => '1;34',
        :value => '36',
        :variable => '34',

        :insert => '42',
        :delete => '41',
        :change => '44',
        :head => '45'
}

module CodeRay
    module Encoders
        class Terminal < Encoder
            # override old colors
            TERM_TOKEN_COLORS.each_pair do |key, value|
                TOKEN_COLORS[key] = value
            end
        end
    end
end

class ShowModels < Pry::ClassCommand
  match "show-models"
  group "Rails"
  description "Show all models."

  def options(opt)
    opt.banner unindent <<-USAGE
      Usage: show-models

      show-models displays the current Rails app's models.
    USAGE

    opt.on :G, "grep", "Filter output to only show results that contain regular expression", :argument => true
    opt.on :V, "grep", "Filter output to only show results that DO NOT contain  regular expression", :argument => true
  end

  def process
    Rails.application.eager_load!

    return unless defined?(ActiveRecord::Base)

    models = ActiveRecord::Base.descendants

    models.sort_by(&:to_s).each do |model|
      out = []
      out.push format_model_name model

      if model.table_exists?
        model.columns.each do |column|
          out.push format_column column.name, column.type
        end
      else
        out.push format_error "Table doesn't exist"
      end

      reflections = model.reflections.sort_by do |other_model, reflection|
        [reflection.macro.to_s, other_model.to_s]
      end

      reflections.each do |other_model, reflection|
        options = []

        if reflection.options[:through].present?
          options << "through #{text.blue ":#{reflection.options[:through]}"}"
        end

        out.push format_association reflection.macro, other_model, options
      end

      print_unless_filtered out
    end
  end

  def format_model_name(model)
    text.bright_blue model
  end

  def format_column(name, type)
    "  #{name}: #{text.green type}"
  end

  def format_association(type, other, options = [])
    options_string = (options.any?) ? " (#{options.join(', ')})" : ''
    "  #{type} #{text.blue ":#{other}"}#{options_string}"
  end

  def format_error(message)
    "  #{text.red message}"
  end

  def print_unless_filtered array_of_strings
    result = array_of_strings.join("\n")
    if opts.present?(:G)
      return unless result =~ grep_regex
      result = colorize_matches(result) # :(
    end
    if opts.present?(:V)
      return unless result !~ vgrep_regex
    end
    output.puts result
  end

  def colorize_matches(string)
    if Pry.color
      string.to_s.gsub(grep_regex) { |s| "\e[7m#{s}\e[27m" }
    else
      string
    end
  end

  def grep_regex
    @grep_regex ||= Regexp.new(opts[:G], Regexp::IGNORECASE)
  end

  def vgrep_regex
    @vgrep_regex ||= Regexp.new(opts[:V], Regexp::IGNORECASE)
  end

  def kind_of_relation(relation)
    case relation.to_s.sub(/^Mongoid::Relations::/, '')
      when 'Referenced::Many' then 'has_many'
      when 'Referenced::One'  then 'has_one'
      when 'Referenced::In'   then 'belongs_to'
      when 'Embedded::Many'   then 'embeds_many'
      when 'Embedded::One'    then 'embeds_one'
      when 'Embedded::In'     then 'embedded_in'
    end
  end
end
Pry.config.commands.add_command ShowModels 

# load rails in Rails 2 if it is running as a rails console
if ENV.include?('RAILS_ENV')
  require File.join(Dir.getwd, 'config', 'environment.rb')
  require 'console_app'
  require 'console_with_helpers'
end